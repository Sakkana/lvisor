diff --git a/lapic.c b/lapic.c
index 7507f97..f2a4add 100644
--- a/lapic.c
+++ b/lapic.c
@@ -12,14 +12,14 @@
 #include "proc.h"  // ncpu
 
 // Local APIC registers, divided by 4 for use as uint[] indices.
-#define ID      (0x0020/4)   // ID
-#define VER     (0x0030/4)   // Version
-#define TPR     (0x0080/4)   // Task Priority
-#define EOI     (0x00B0/4)   // EOI
-#define SVR     (0x00F0/4)   // Spurious Interrupt Vector
+#define ID      0x0020   // ID
+#define VER     0x0030   // Version
+#define TPR     0x0080   // Task Priority
+#define EOI     0x00B0   // EOI
+#define SVR     0x00F0   // Spurious Interrupt Vector
   #define ENABLE     0x00000100   // Unit Enable
-#define ESR     (0x0280/4)   // Error Status
-#define ICRLO   (0x0300/4)   // Interrupt Command
+#define ESR     0x0280   // Error Status
+#define ICRLO   0x0300   // Interrupt Command
   #define INIT       0x00000500   // INIT/RESET
   #define STARTUP    0x00000600   // Startup IPI
   #define DELIVS     0x00001000   // Delivery status
@@ -29,35 +29,87 @@
   #define BCAST      0x00080000   // Send to all APICs, including self.
   #define BUSY       0x00001000
   #define FIXED      0x00000000
-#define ICRHI   (0x0310/4)   // Interrupt Command [63:32]
-#define TIMER   (0x0320/4)   // Local Vector Table 0 (TIMER)
+#define ICRHI   0x0310   // Interrupt Command [63:32]
+#define TIMER   0x0320   // Local Vector Table 0 (TIMER)
   #define X1         0x0000000B   // divide counts by 1
   #define PERIODIC   0x00020000   // Periodic
-#define PCINT   (0x0340/4)   // Performance Counter LVT
-#define LINT0   (0x0350/4)   // Local Vector Table 1 (LINT0)
-#define LINT1   (0x0360/4)   // Local Vector Table 2 (LINT1)
-#define ERROR   (0x0370/4)   // Local Vector Table 3 (ERROR)
+#define PCINT   0x0340   // Performance Counter LVT
+#define LINT0   0x0350   // Local Vector Table 1 (LINT0)
+#define LINT1   0x0360   // Local Vector Table 2 (LINT1)
+#define ERROR   0x0370   // Local Vector Table 3 (ERROR)
   #define MASKED     0x00010000   // Interrupt masked
-#define TICR    (0x0380/4)   // Timer Initial Count
-#define TCCR    (0x0390/4)   // Timer Current Count
-#define TDCR    (0x03E0/4)   // Timer Divide Configuration
+#define TICR    0x0380   // Timer Initial Count
+#define TCCR    0x0390   // Timer Current Count
+#define TDCR    0x03E0   // Timer Divide Configuration
+
+#define MSR_APIC_000   0x800
+#define MSR_APIC_BASE  0x01b
+#define APIC_BASE_EXTD (1<<10)
 
 volatile uint *lapic;  // Initialized in mp.c
 
+static int x2apic;
+
+static int
+lapicr(uint index)
+{
+  if(x2apic){
+    uint low, high;
+    rdmsr(MSR_APIC_000+(index>>4), &low, &high);
+    return low;
+  }
+  return lapic[index/4];
+}
+
 static void
-lapicw(int index, int value)
+lapicw(uint index, uint value)
+{
+  if(x2apic){
+    wrmsr(MSR_APIC_000+(index>>4), value, 0);
+    return;
+  }
+  lapic[index/4] = value;
+  lapic[ID/4];  // wait for write to finish, by reading
+}
+
+static int
+lapicr_id(void)
 {
-  lapic[index] = value;
-  lapic[ID];  // wait for write to finish, by reading
+  int id = lapicr(ID);
+  return x2apic ? id : (id>>24)&0xff;
+}
+
+static void
+lapicw_icr(uint value, uint id)
+{
+  if(x2apic)
+    return wrmsr(MSR_APIC_000+(ICRLO>>4), value, id);
+  lapicw(ICRLO+0x10, id<<24);
+  lapicw(ICRLO, value);
 }
 //PAGEBREAK!
 
+static void
+try_enable_x2apic(void)
+{
+  uint regs[4], low, high;
+  cpuid(1, regs);
+  if(!(regs[2]&(1<<21)))
+    return;
+  rdmsr(MSR_APIC_BASE, &low, &high);
+  if(!(low&APIC_BASE_EXTD))
+    wrmsr(MSR_APIC_BASE, low|APIC_BASE_EXTD, high);
+  x2apic = 1;
+}
+
 void
 lapicinit(void)
 {
   if(!lapic)
     return;
 
+  try_enable_x2apic();
+
   // Enable local APIC; set spurious interrupt vector.
   lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
 
@@ -75,7 +127,7 @@ lapicinit(void)
 
   // Disable performance counter overflow interrupts
   // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
+  if(((lapicr(VER)>>16) & 0xFF) >= 4)
     lapicw(PCINT, MASKED);
 
   // Map error interrupt to IRQ_ERROR.
@@ -89,9 +141,8 @@ lapicinit(void)
   lapicw(EOI, 0);
 
   // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-  while(lapic[ICRLO] & DELIVS)
+  lapicw_icr(BCAST | INIT | LEVEL, 0);
+  while(lapicr(ICRLO) & DELIVS)
     ;
 
   // Enable interrupts on the APIC (but not on the processor).
@@ -118,7 +169,7 @@ cpunum(void)
   if (!lapic)
     return 0;
 
-  apicid = lapic[ID] >> 24;
+  apicid = lapicr_id();
   for (i = 0; i < ncpu; ++i) {
     if (cpus[i].apicid == apicid)
       return i;
@@ -163,10 +214,9 @@ lapicstartap(uchar apicid, uint addr)
 
   // "Universal startup algorithm."
   // Send INIT (level-triggered) interrupt to reset other CPU.
-  lapicw(ICRHI, apicid<<24);
-  lapicw(ICRLO, INIT | LEVEL | ASSERT);
+  lapicw_icr(INIT | LEVEL | ASSERT, apicid);
   microdelay(200);
-  lapicw(ICRLO, INIT | LEVEL);
+  lapicw_icr(INIT | LEVEL, apicid);
   microdelay(100);    // should be 10ms, but too slow in Bochs!
 
   // Send startup IPI (twice!) to enter code.
@@ -175,8 +225,7 @@ lapicstartap(uchar apicid, uint addr)
   // should be ignored, but it is part of the official Intel algorithm.
   // Bochs complains about the second one.  Too bad for Bochs.
   for(i = 0; i < 2; i++){
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
+    lapicw_icr(STARTUP | (addr>>12), apicid);
     microdelay(200);
   }
 }
diff --git a/main.c b/main.c
index 731e429..793759c 100644
--- a/main.c
+++ b/main.c
@@ -45,8 +45,8 @@ static void
 mpenter(void)
 {
   switchkvm();
-  seginit();
   lapicinit();
+  seginit();
   mpmain();
 }
 
diff --git a/uart.c b/uart.c
index 84da397..8a4a30a 100644
--- a/uart.c
+++ b/uart.c
@@ -56,7 +56,7 @@ uartputc(int c)
 
   if(!uart)
     return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+  for(i = 0; !(inb(COM1+5) & 0x20); i++)
     microdelay(10);
   outb(COM1+0, c);
 }
diff --git a/x86.h b/x86.h
index 07312a5..d82ed86 100644
--- a/x86.h
+++ b/x86.h
@@ -144,6 +144,26 @@ lcr3(uint val)
   asm volatile("movl %0,%%cr3" : : "r" (val));
 }
 
+static inline void
+cpuid(uint leaf, uint *regs)
+{
+  asm volatile("cpuid" :
+               "=a" (regs[0]), "=b" (regs[1]), "=c" (regs[2]), "=d" (regs[3]) :
+               "a" (leaf));
+}
+
+static inline void
+rdmsr(uint msr, uint *low, uint *high)
+{
+  asm volatile("rdmsr" : "=a" (*low), "=d" (*high) : "c" (msr));
+}
+
+static inline void
+wrmsr(uint msr, uint low, uint high)
+{
+  asm volatile("wrmsr" : : "c" (msr), "a" (low), "d" (high) : "memory");
+}
+
 //PAGEBREAK: 36
 // Layout of the trap frame built on the stack by the
 // hardware and by trapasm.S, and passed to trap().
